url命名：  
1.为什么需要给url命名  
因为url经常变化，如果在代码中写死，修改会非常麻烦，因此给url取个名字，以后
再使用的时候可以直接使用url的name  
2.如何给一个url指定名称  
```python
urlpatterns = [
    path('', views.index, name='index'),
    path('login/', views.login, name='login')
]
```
3.应用命名空间  
在多个app之间，可能存在相同name的url名，为了避免反转url产生混淆，可以使用app_name
和url_name来唯一确定一个url地址
```python
app_name = 'cms'

urlpatterns = [
    path('', views.index, name='index'),
    path('login/', views.login, name='login')
]
```
应用命名空间和实例命名空间  
3.一个app,可以创建多个实例，可以使用多个url地址映射同一个app，所以就会产生
一个问题，在反转的时候，只是用应用命名空间，就会发生混淆,比如进入cms1首页应该要跳转cms1/login，
而不是cms/login，为了避免这个问题，可以使用
实例命名空间，实例命名空间也是非常简单，只要在include函数中传递一个namespace变量
即可，示例代码如下
```python
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('front.urls')),
    # 同一个app下有两个实例,新增示例命令空间
    path('cms/', include('cms.urls', namespace='cms')),
    path('cms1/', include('cms.urls', namespace='cms1')),
]
```
以后在做反转的时候，就可以根据实例命名空间来指定具体的url，示例代码如下
```python
def index(request):
    username = request.GET.get('username')
    if username:
        return HttpResponse('CMS首页')
    else:
        # 获取命名空间
        current_namespace = request.resolver_match.namespace
        return redirect(reverse('%s:login' % current_namespace))
```